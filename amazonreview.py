# -*- coding: utf-8 -*-
"""amazonreview.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8n7YFoDJoba7LDhAxRaJW2xwCAKnWwv
"""

import pandas as pd

df = pd.read_csv("AmazonReview.csv")
print(df.shape)
df.head()

print(df.columns.tolist())

df = df[['Review', 'Sentiment']]
df.dropna(inplace=True)
df.rename(columns={'Review': 'full_text', 'Sentiment': 'label'}, inplace=True)
df.head()

import nltk
import re
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')

stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def preprocess(text):
    text = re.sub(r'[^a-zA-Z]', ' ', text.lower())
    words = text.split()
    words = [lemmatizer.lemmatize(word) for word in words if word not in stop_words]
    return ' '.join(words)

df['clean_text'] = df['full_text'].apply(preprocess)
df.head()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split

vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['clean_text'])

y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

print(df['label'].unique())

def convert_to_sentiment(rating):
    if rating in [1, 2]:
        return 'negative'
    elif rating == 3:
        return 'neutral'
    else:
        return 'positive'

df['sentiment'] = df['label'].apply(convert_to_sentiment)

positive_text = " ".join(df[df['sentiment'] == 'positive']['clean_text'])
negative_text = " ".join(df[df['sentiment'] == 'negative']['clean_text'])

from wordcloud import WordCloud
import matplotlib.pyplot as plt

positive_text = " ".join(df[df['sentiment'] == 'positive']['clean_text'])
negative_text = " ".join(df[df['sentiment'] == 'negative']['clean_text'])

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
WordCloud(width=600, height=400, background_color='white').generate(positive_text)
plt.imshow(WordCloud(width=600, height=400, background_color='white').generate(positive_text), interpolation='bilinear')
plt.axis("off")
plt.title("Positive Reviews")

plt.subplot(1, 2, 2)
plt.imshow(WordCloud(width=600, height=400, background_color='white').generate(negative_text), interpolation='bilinear')
plt.axis("off")
plt.title("Negative Reviews")

plt.tight_layout()
plt.show()

import numpy as np

feature_names = vectorizer.get_feature_names_out()
coefs = model.coef_[0]

top_pos_indices = np.argsort(coefs)[-10:]
top_neg_indices = np.argsort(coefs)[:10]

print("Top Positive Terms:")
for i in reversed(top_pos_indices):
    print(f"{feature_names[i]}: {coefs[i]:.4f}")

print("\nTop Negative Terms:")
for i in top_neg_indices:
    print(f"{feature_names[i]}: {coefs[i]:.4f}")

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred, labels=model.classes_)

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()